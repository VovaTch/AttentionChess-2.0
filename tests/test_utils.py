import unittest
import copy

import torch
import chess

from utils import board_to_representation, move_to_word, word_to_move

class test_utils(unittest.TestCase):
    
    def setUp(self) -> None:
        self.board = chess.Board()
        return super().setUp()
    
    def test_initial(self):
        init_board = copy.deepcopy(self.board)
        expected_board = torch.tensor([[ # white pawns
            [0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1],
            [0.25, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.25],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0]
        ], [ # white knights
            [0, 1, 0, 0, 0, 0, 1, 0],
            [0, 0, 0, 0.25, 0.25, 0, 0, 0],
            [0.25, 0, 0.25, 0, 0, 0.25, 0, 0.25],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0]
        ], [ # white bishops
            [0, 0, 1, 0, 0, 1, 0, 0],
            [0, 0.25, 0, 0.25, 0.25, 0, 0.25, 0],
            [0.1, 0, 0, 0.1, 0.1, 0, 0, 0.1],
            [0, 0, 0.1, 0, 0, 0.1, 0, 0],
            [0, 0.1, 0, 0, 0, 0, 0.1, 0],
            [0.1, 0, 0, 0, 0, 0, 0, 0.1],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0]
        ], [ # white rooks
            [1, 0.25, 0.1, 0.1, 0.1, 0.1, 0.25, 1],
            [0.25, 0, 0, 0, 0, 0, 0, 0.25],
            [0.1, 0, 0, 0, 0, 0, 0, 0.1],
            [0.1, 0, 0, 0, 0, 0, 0, 0.1],
            [0.1, 0, 0, 0, 0, 0, 0, 0.1],
            [0.1, 0, 0, 0, 0, 0, 0, 0.1],
            [0.1, 0, 0, 0, 0, 0, 0, 0.1],
            [0.1, 0, 0, 0, 0, 0, 0, 0.1]
        ], [    # white queen         
            [0.1, 0.1, 0.25, 1, 0.25, 0.1, 0.1, 0.1],
            [0, 0, 0.25, 0.25, 0.25, 0, 0, 0],
            [0, 0.1, 0, 0.1, 0, 0.1, 0, 0],
            [0.1, 0, 0, 0.1, 0, 0, 0.1, 0],
            [0, 0, 0, 0.1, 0, 0, 0, 0.1],
            [0, 0, 0, 0.1, 0, 0, 0, 0],
            [0, 0, 0, 0.1, 0, 0, 0, 0],
            [0, 0, 0, 0.1, 0, 0, 0, 0]
        ], [ # white king
            [0, 0, 0, 0.25, 2, 0.25, 0, 0],
            [0, 0, 0, 0.25, 0.25, 0.25, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0]
        ], [ # black pawns
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0.25, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.25],
            [1, 1, 1, 1, 1, 1, 1, 1],
            [0, 0, 0, 0, 0, 0, 0, 0]
        ], [ # black knights            
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0.25, 0, 0.25, 0, 0, 0.25, 0, 0.25],
            [0, 0, 0, 0.25, 0.25, 0, 0, 0],
            [0, 1, 0, 0, 0, 0, 1, 0]
        ], [ # black bishops
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0.1, 0, 0, 0, 0, 0, 0, 0.1],
            [0, 0.1, 0, 0, 0, 0, 0.1, 0],
            [0, 0, 0.1, 0, 0, 0.1, 0, 0],
            [0.1, 0, 0, 0.1, 0.1, 0, 0, 0.1],
            [0, 0.25, 0, 0.25, 0.25, 0, 0.25, 0],
            [0, 0, 1, 0, 0, 1, 0, 0]
        ], [ # black rooks           
            [0.1, 0, 0, 0, 0, 0, 0, 0.1],
            [0.1, 0, 0, 0, 0, 0, 0, 0.1],
            [0.1, 0, 0, 0, 0, 0, 0, 0.1],
            [0.1, 0, 0, 0, 0, 0, 0, 0.1],
            [0.1, 0, 0, 0, 0, 0, 0, 0.1],
            [0.1, 0, 0, 0, 0, 0, 0, 0.1],
            [0.25, 0, 0, 0, 0, 0, 0, 0.25],
            [1, 0.25, 0.1, 0.1, 0.1, 0.1, 0.25, 1]
        ], [             # black queen
            [0, 0, 0, 0.1, 0, 0, 0, 0],
            [0, 0, 0, 0.1, 0, 0, 0, 0],
            [0, 0, 0, 0.1, 0, 0, 0, 0],
            [0, 0, 0, 0.1, 0, 0, 0, 0.1],
            [0.1, 0, 0, 0.1, 0, 0, 0.1, 0],
            [0, 0.1, 0, 0.1, 0, 0.1, 0, 0],
            [0, 0, 0.25, 0.25, 0.25, 0, 0, 0],
            [0.1, 0.1, 0.25, 1, 0.25, 0.1, 0.1, 0.1]
        ], [ # black king
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0.25, 0.25, 0.25, 0, 0],
            [0, 0, 0, 0.25, 2, 0.25, 0, 0]
        ], [  # cols          
            [0, 1, 2, 3, 4, 5, 6, 7],
            [0, 1, 2, 3, 4, 5, 6, 7],
            [0, 1, 2, 3, 4, 5, 6, 7],
            [0, 1, 2, 3, 4, 5, 6, 7],
            [0, 1, 2, 3, 4, 5, 6, 7],
            [0, 1, 2, 3, 4, 5, 6, 7],
            [0, 1, 2, 3, 4, 5, 6, 7],
            [0, 1, 2, 3, 4, 5, 6, 7]
        ], [ # rows
            [0, 0, 0, 0, 0, 0, 0, 0],
            [1, 1, 1, 1, 1, 1, 1, 1],
            [2, 2, 2, 2, 2, 2, 2, 2],
            [3, 3, 3, 3, 3, 3, 3, 3],
            [4, 4, 4, 4, 4, 4, 4, 4],
            [5, 5, 5, 5, 5, 5, 5, 5],
            [6, 6, 6, 6, 6, 6, 6, 6],
            [7, 7, 7, 7, 7, 7, 7, 7]
        ], [ # turn           
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0]
        ], [ # influence area           
            [0, 1, 1, 1, 1, 1, 1, 0],
            [1, 1, 1, 4, 4, 1, 1, 1],
            [2, 2, 3, 2, 2, 3, 2, 2],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0],
            [-2, -2, -3, -2, -2, -3, -2, -2],
            [-1, -1, -1, -4, -4, -1, -1, -1],
            [0, -1, -1, -1, -1, -1, -1, 0]
        ]])
        predicted_board = board_to_representation(init_board)
        equal_flag = torch.equal(predicted_board, expected_board)
        self.assertTrue(equal_flag)

    def test_move_to_word_e2e4(self):
        move_test = chess.Move.from_uci('e2e4')
        expected_int = 1804
        predicted_int = move_to_word(move_test)
        predicted_move = word_to_move(1804)
        self.assertEqual(predicted_int, expected_int)
        self.assertEqual('e2e4', predicted_move.uci())
        
    def test_move_to_word_d7c8q(self):
        move_test = chess.Move.from_uci('d7c8q')
        expected_int = 4275
        predicted_int = move_to_word(move_test)
        predicted_move = word_to_move(4275)
        self.assertEqual(predicted_int, expected_int)
        self.assertEqual('d7c8q', predicted_move.uci())
        
    def test_move_to_word_a2b1n(self):
        move_test = chess.Move.from_uci('a2b1n')
        expected_int = 4680
        predicted_int = move_to_word(move_test)
        predicted_move = word_to_move(4680)
        self.assertEqual(predicted_int, expected_int)
        self.assertEqual('a2b1n', predicted_move.uci())

if __name__ == '__main__':
    unittest.main()